name: Go

on:
  push:
    branches  : [ main ]
  pull_request:
    branches  : [ main ]

jobs:
  golangci:
    name      : lint
    runs-on   : ubuntu-latest
    steps:
      - uses  : actions/checkout@v2
      - name  : golangci-lint
        uses  : golangci/golangci-lint-action@v2
        with  :
        
          version: latest
  test:
    needs   : golangci
    runs-on : ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build
        run : go build -v ./...
      
      - name: Test
        run : go test -v ./...
      
  gosec:
    needs: test
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...

  push-deploy:
    needs    : gosec
    name     : Deploy
    runs-on  : ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id    : ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region           : us-east-1
        
    - name: Login to Amazon ECR
      id  : login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id  : build-image
      env:
        ECR_REGISTRY  : ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG     : ${{ github.sha }}
        L: "latest"
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$L .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition task1 --query taskDefinition > task-definition.json
    - name: Fill in the new image ID in the Amazon ECS task definition
      id  : task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name : exam-devops-container2
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: exam-devops-container-service
        cluster: exam-devops-cluster
        wait-for-service-stability: true
        
